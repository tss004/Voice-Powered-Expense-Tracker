"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpeechProvider = exports.SpeechContext = void 0;
var react_1 = __importDefault(require("react"));
var browser_client_1 = require("@speechly/browser-client");
var types_1 = require("./types");
var state_1 = require("./state");
/**
 * A React context that holds the state of Speechly SLU API client.
 * @public
 */
exports.SpeechContext = react_1.default.createContext({
    initialise: function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
        return [2 /*return*/, Promise.resolve()];
    }); }); },
    toggleRecording: function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
        return [2 /*return*/, Promise.resolve()];
    }); }); },
    switchApp: function () { },
    speechState: types_1.SpeechState.Idle,
});
/**
 * The provider for SpeechContext.
 *
 * Make sure you have only one SpeechProvider in your application,
 * because otherwise the audio will be mixed up and unusable.
 *
 * It is possible to switch the props on the fly, which will make provider stop current client if it's running
 * and start a new one.
 * @public
 */
var SpeechProvider = /** @class */ (function (_super) {
    __extends(SpeechProvider, _super);
    function SpeechProvider(props) {
        var _this = _super.call(this, props) || this;
        _this.initialiseAudio = function () { return __awaiter(_this, void 0, void 0, function () {
            var _a, client, clientState;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.state, client = _a.client, clientState = _a.clientState;
                        if (!(clientState === browser_client_1.ClientState.Disconnected)) return [3 /*break*/, 2];
                        return [4 /*yield*/, client.initialize()];
                    case 1:
                        _b.sent();
                        _b.label = 2;
                    case 2: return [2 /*return*/, Promise.resolve()];
                }
            });
        }); };
        _this.startContext = function () { return __awaiter(_this, void 0, void 0, function () {
            var _a, client, clientState, appId, startedContextPromise, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _a = this.state, client = _a.client, clientState = _a.clientState, appId = _a.appId;
                        _b = clientState;
                        switch (_b) {
                            case browser_client_1.ClientState.Disconnected: return [3 /*break*/, 1];
                            case browser_client_1.ClientState.Connected: return [3 /*break*/, 3];
                            case browser_client_1.ClientState.Stopping: return [3 /*break*/, 3];
                        }
                        return [3 /*break*/, 4];
                    case 1: return [4 /*yield*/, client.initialize()
                        // falls through
                    ];
                    case 2:
                        _c.sent();
                        _c.label = 3;
                    case 3:
                        if (appId !== undefined) {
                            startedContextPromise = client.startContext(appId);
                        }
                        else {
                            startedContextPromise = client.startContext();
                        }
                        return [3 /*break*/, 5];
                    case 4:
                        console.warn('Cannot start context - client is not connected');
                        _c.label = 5;
                    case 5:
                        this.setState({ startedContextPromise: startedContextPromise });
                        if (!(startedContextPromise !== undefined)) return [3 /*break*/, 7];
                        return [4 /*yield*/, startedContextPromise];
                    case 6:
                        _c.sent();
                        _c.label = 7;
                    case 7: return [2 /*return*/];
                }
            });
        }); };
        _this.stopContext = function () { return __awaiter(_this, void 0, void 0, function () {
            var _a, client, startedContextPromise;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.state, client = _a.client, startedContextPromise = _a.startedContextPromise;
                        if (!(startedContextPromise !== undefined)) return [3 /*break*/, 2];
                        return [4 /*yield*/, startedContextPromise];
                    case 1:
                        _b.sent();
                        _b.label = 2;
                    case 2: return [4 /*yield*/, client.stopContext()];
                    case 3:
                        _b.sent();
                        return [2 /*return*/, Promise.resolve()];
                }
            });
        }); };
        _this.toggleRecording = function () { return __awaiter(_this, void 0, void 0, function () {
            var toggleIsOn;
            return __generator(this, function (_a) {
                toggleIsOn = this.state.toggleIsOn;
                this.setState({ toggleIsOn: !toggleIsOn });
                if (!toggleIsOn) {
                    return [2 /*return*/, this.startContext()];
                }
                return [2 /*return*/, this.stopContext()];
            });
        }); };
        _this.switchApp = function (appId) { return __awaiter(_this, void 0, void 0, function () {
            var _a, client, clientState;
            return __generator(this, function (_b) {
                _a = this.state, client = _a.client, clientState = _a.clientState;
                this.setState({ appId: appId });
                if (clientState === browser_client_1.ClientState.Recording) {
                    return [2 /*return*/, client.switchContext(appId)];
                }
                return [2 /*return*/];
            });
        }); };
        _this.initialiseClient = function (opts) {
            var _a;
            var client = new browser_client_1.Client(opts);
            client.onStateChange(_this.onClientStateChange);
            client.onSegmentChange(_this.onSegmentChange);
            client.onTranscript(_this.onTranscript);
            client.onEntity(_this.onEntity);
            client.onIntent(_this.onIntent);
            if (!((_a = opts.disableTenative) !== null && _a !== void 0 ? _a : false)) {
                client.onTentativeIntent(_this.onTentativeIntent);
                client.onTentativeTranscript(_this.onTentativeTranscript);
                client.onTentativeEntities(_this.onTentativeEntities);
            }
            return client;
        };
        _this.onClientStateChange = function (clientState) {
            _this.setState({ clientState: clientState, recordingState: state_1.mapClientState(clientState) });
        };
        _this.onSegmentChange = function (segment) {
            if (!segment.isFinal) {
                _this.setState({ segment: segment });
                return;
            }
            // Reset individual values when a segment is finalised.
            _this.setState({
                segment: segment,
                tentativeTranscript: undefined,
                transcript: undefined,
                tentativeEntities: undefined,
                entity: undefined,
                tentativeIntent: undefined,
                intent: undefined,
            });
        };
        _this.onTentativeTranscript = function (contextId, segmentId, words, text) {
            _this.setState({
                tentativeTranscript: {
                    contextId: contextId,
                    segmentId: segmentId,
                    text: text,
                    words: words,
                },
            });
        };
        _this.onTranscript = function (contextId, segmentId, word) {
            _this.setState({
                transcript: {
                    contextId: contextId,
                    segmentId: segmentId,
                    word: word,
                },
            });
        };
        _this.onTentativeEntities = function (contextId, segmentId, entities) {
            _this.setState({
                tentativeEntities: {
                    contextId: contextId,
                    segmentId: segmentId,
                    entities: entities,
                },
            });
        };
        _this.onEntity = function (contextId, segmentId, entity) {
            _this.setState({
                entity: {
                    contextId: contextId,
                    segmentId: segmentId,
                    entity: entity,
                },
            });
        };
        _this.onTentativeIntent = function (contextId, segmentId, intent) {
            _this.setState({
                tentativeIntent: {
                    contextId: contextId,
                    segmentId: segmentId,
                    intent: intent,
                },
            });
        };
        _this.onIntent = function (contextId, segmentId, intent) {
            _this.setState({
                intent: {
                    contextId: contextId,
                    segmentId: segmentId,
                    intent: intent,
                },
            });
        };
        _this.state = {
            client: _this.initialiseClient(props),
            recordingState: types_1.SpeechState.Idle,
            clientState: browser_client_1.ClientState.Disconnected,
            toggleIsOn: false,
            appId: props.appId,
            startedContextPromise: undefined,
        };
        return _this;
    }
    SpeechProvider.prototype.render = function () {
        var _this = this;
        var _a = this.state, appId = _a.appId, recordingState = _a.recordingState, segment = _a.segment, tentativeTranscript = _a.tentativeTranscript, transcript = _a.transcript, tentativeEntities = _a.tentativeEntities, entity = _a.entity, tentativeIntent = _a.tentativeIntent, intent = _a.intent;
        return (react_1.default.createElement(exports.SpeechContext.Provider, { value: {
                initialise: this.initialiseAudio,
                toggleRecording: this.toggleRecording,
                switchApp: function (appId) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                    return [2 /*return*/, this.switchApp(appId)];
                }); }); },
                appId: appId,
                speechState: recordingState,
                segment: segment,
                tentativeTranscript: tentativeTranscript,
                transcript: transcript,
                tentativeEntities: tentativeEntities,
                entity: entity,
                tentativeIntent: tentativeIntent,
                intent: intent,
            } }, this.props.children));
    };
    SpeechProvider.prototype.componentDidUpdate = function (prevProps) {
        return __awaiter(this, void 0, void 0, function () {
            var props, client, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        props = this.props;
                        // We cannot compare microphone / api client / storage implementations,
                        // so changes in those will be ignored.
                        // A better approach for those would be to use separate contexts.
                        if (props.appId === prevProps.appId &&
                            props.language === prevProps.language &&
                            props.sampleRate === prevProps.sampleRate &&
                            props.debug === prevProps.debug &&
                            props.loginUrl === prevProps.loginUrl &&
                            props.apiUrl === prevProps.apiUrl) {
                            return [2 /*return*/];
                        }
                        client = this.state.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.close()];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        console.error('Error closing Speechly client:', e_1);
                        return [3 /*break*/, 4];
                    case 4:
                        this.setState({ client: this.initialiseClient(props) });
                        return [2 /*return*/];
                }
            });
        });
    };
    SpeechProvider.prototype.componentWillUnmount = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.state.client.close()];
                    case 1:
                        _b.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        _a = _b.sent();
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    return SpeechProvider;
}(react_1.default.Component));
exports.SpeechProvider = SpeechProvider;
//# sourceMappingURL=context.js.map