{"ast":null,"code":"var clone = require('./clone');\n\nvar forOwn = require('../object/forOwn');\n\nvar kindOf = require('./kindOf');\n\nvar isPlainObject = require('./isPlainObject');\n/**\n * Recursively clone native types.\n */\n\n\nfunction deepClone(val, instanceClone) {\n  switch (kindOf(val)) {\n    case 'Object':\n      return cloneObject(val, instanceClone);\n\n    case 'Array':\n      return cloneArray(val, instanceClone);\n\n    default:\n      return clone(val);\n  }\n}\n\nfunction cloneObject(source, instanceClone) {\n  if (isPlainObject(source)) {\n    var out = {};\n    forOwn(source, function (val, key) {\n      this[key] = deepClone(val, instanceClone);\n    }, out);\n    return out;\n  } else if (instanceClone) {\n    return instanceClone(source);\n  } else {\n    return source;\n  }\n}\n\nfunction cloneArray(arr, instanceClone) {\n  var out = [],\n      i = -1,\n      n = arr.length,\n      val;\n\n  while (++i < n) {\n    out[i] = deepClone(arr[i], instanceClone);\n  }\n\n  return out;\n}\n\nmodule.exports = deepClone;","map":{"version":3,"sources":["C:/Users/hp/Desktop/Projects/Expense-Tracker/node_modules/mout/lang/deepClone.js"],"names":["clone","require","forOwn","kindOf","isPlainObject","deepClone","val","instanceClone","cloneObject","cloneArray","source","out","key","arr","i","n","length","module","exports"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,SAAD,CAAnB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,kBAAD,CAApB;;AACA,IAAIE,MAAM,GAAGF,OAAO,CAAC,UAAD,CAApB;;AACA,IAAIG,aAAa,GAAGH,OAAO,CAAC,iBAAD,CAA3B;AAEI;AACJ;AACA;;;AACI,SAASI,SAAT,CAAmBC,GAAnB,EAAwBC,aAAxB,EAAuC;AACnC,UAASJ,MAAM,CAACG,GAAD,CAAf;AACI,SAAK,QAAL;AACI,aAAOE,WAAW,CAACF,GAAD,EAAMC,aAAN,CAAlB;;AACJ,SAAK,OAAL;AACI,aAAOE,UAAU,CAACH,GAAD,EAAMC,aAAN,CAAjB;;AACJ;AACI,aAAOP,KAAK,CAACM,GAAD,CAAZ;AANR;AAQH;;AAED,SAASE,WAAT,CAAqBE,MAArB,EAA6BH,aAA7B,EAA4C;AACxC,MAAIH,aAAa,CAACM,MAAD,CAAjB,EAA2B;AACvB,QAAIC,GAAG,GAAG,EAAV;AACAT,IAAAA,MAAM,CAACQ,MAAD,EAAS,UAASJ,GAAT,EAAcM,GAAd,EAAmB;AAC9B,WAAKA,GAAL,IAAYP,SAAS,CAACC,GAAD,EAAMC,aAAN,CAArB;AACH,KAFK,EAEHI,GAFG,CAAN;AAGA,WAAOA,GAAP;AACH,GAND,MAMO,IAAIJ,aAAJ,EAAmB;AACtB,WAAOA,aAAa,CAACG,MAAD,CAApB;AACH,GAFM,MAEA;AACH,WAAOA,MAAP;AACH;AACJ;;AAED,SAASD,UAAT,CAAoBI,GAApB,EAAyBN,aAAzB,EAAwC;AACpC,MAAII,GAAG,GAAG,EAAV;AAAA,MACIG,CAAC,GAAG,CAAC,CADT;AAAA,MAEIC,CAAC,GAAGF,GAAG,CAACG,MAFZ;AAAA,MAGIV,GAHJ;;AAIA,SAAO,EAAEQ,CAAF,GAAMC,CAAb,EAAgB;AACZJ,IAAAA,GAAG,CAACG,CAAD,CAAH,GAAST,SAAS,CAACQ,GAAG,CAACC,CAAD,CAAJ,EAASP,aAAT,CAAlB;AACH;;AACD,SAAOI,GAAP;AACH;;AAEDM,MAAM,CAACC,OAAP,GAAiBb,SAAjB","sourcesContent":["var clone = require('./clone');\nvar forOwn = require('../object/forOwn');\nvar kindOf = require('./kindOf');\nvar isPlainObject = require('./isPlainObject');\n\n    /**\n     * Recursively clone native types.\n     */\n    function deepClone(val, instanceClone) {\n        switch ( kindOf(val) ) {\n            case 'Object':\n                return cloneObject(val, instanceClone);\n            case 'Array':\n                return cloneArray(val, instanceClone);\n            default:\n                return clone(val);\n        }\n    }\n\n    function cloneObject(source, instanceClone) {\n        if (isPlainObject(source)) {\n            var out = {};\n            forOwn(source, function(val, key) {\n                this[key] = deepClone(val, instanceClone);\n            }, out);\n            return out;\n        } else if (instanceClone) {\n            return instanceClone(source);\n        } else {\n            return source;\n        }\n    }\n\n    function cloneArray(arr, instanceClone) {\n        var out = [],\n            i = -1,\n            n = arr.length,\n            val;\n        while (++i < n) {\n            out[i] = deepClone(arr[i], instanceClone);\n        }\n        return out;\n    }\n\n    module.exports = deepClone;\n\n\n\n"]},"metadata":{},"sourceType":"script"}