{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\expensetracker\\\\src\\\\components\\\\Main\\\\Form\\\\Form.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect } from 'react';\nimport { TextField, Typography, Grid, Button, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\nimport { v4 as uuidv4 } from 'uuid';\nimport { useSpeechContext } from '@speechly/react-client';\nimport Snackbar from '../../Snackbar/Snackbar';\nimport formatDate from '../../../utils/formatDate';\nimport { ExpenseTrackerContext } from '../../../context/context';\nimport { incomeCategories, expenseCategories } from '../../../constants/categories';\nimport useStyles from './styles';\nimport { InfoCard } from '../..';\nconst initialState = {\n  amount: '',\n  category: '',\n  type: 'Income',\n  date: formatDate(new Date())\n};\n\nconst NewTransactionForm = () => {\n  _s();\n\n  const classes = useStyles();\n  const {\n    addTransaction\n  } = useContext(ExpenseTrackerContext);\n  const [formData, setFormData] = useState(initialState);\n  const {\n    segment\n  } = useSpeechContext();\n  const [open, setOpen] = React.useState(false);\n\n  const createTransaction = () => {\n    if (Number.isNaN(Number(formData.amount)) || !formData.date.includes('-')) return;\n\n    if (incomeCategories.map(iC => iC.type).includes(formData.category)) {\n      setFormData({ ...formData,\n        type: 'Income'\n      });\n    } else if (expenseCategories.map(iC => iC.type).includes(formData.category)) {\n      setFormData({ ...formData,\n        type: 'Expense'\n      });\n    }\n\n    setOpen(true);\n    addTransaction({ ...formData,\n      amount: Number(formData.amount),\n      id: uuidv4()\n    });\n    setFormData(initialState);\n  };\n\n  useEffect(() => {\n    if (segment) {\n      if (segment.intent.intent === 'add_expense') {\n        setFormData({ ...formData,\n          type: 'Expense'\n        });\n      } else if (segment.intent.intent === 'add_income') {\n        setFormData({ ...formData,\n          type: 'Income'\n        });\n      } else if (segment.isFinal && segment.intent.intent === 'create_transaction') {\n        return createTransaction();\n      } else if (segment.isFinal && segment.intent.intent === 'cancel_transaction') {\n        return setFormData(initialState);\n      }\n\n      segment.entities.forEach(s => {\n        const category = `${s.value.charAt(0)}${s.value.slice(1).toLowerCase()}`;\n\n        switch (s.type) {\n          case 'amount':\n            setFormData({ ...formData,\n              amount: s.value\n            });\n            break;\n\n          case 'category':\n            if (incomeCategories.map(iC => iC.type).includes(category)) {\n              setFormData({ ...formData,\n                type: 'Income',\n                category\n              });\n            } else if (expenseCategories.map(iC => iC.type).includes(category)) {\n              setFormData({ ...formData,\n                type: 'Expense',\n                category\n              });\n            }\n\n            break;\n\n          case 'date':\n            setFormData({ ...formData,\n              date: s.value\n            });\n            break;\n\n          default:\n            break;\n        }\n      });\n\n      if (segment.isFinal && formData.amount && formData.category && formData.type && formData.date) {\n        createTransaction();\n      }\n    }\n  }, [segment]);\n  const selectedCategories = formData.type === 'Income' ? incomeCategories : expenseCategories;\n  return /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Snackbar, {\n    open: open,\n    setOpen: setOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    align: \"center\",\n    variant: \"subtitle2\",\n    gutterBottom: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, segment ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"segment\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, segment.words.map(w => w.value).join(\" \")) : null)), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  }, \"Type\"), /*#__PURE__*/React.createElement(Select, {\n    value: formData.type,\n    onChange: e => setFormData({ ...formData,\n      type: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"Income\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }, \"Income\"), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"Expense\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }, \"Expense\")))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  }, \"Category\"), /*#__PURE__*/React.createElement(Select, {\n    value: formData.category,\n    onChange: e => setFormData({ ...formData,\n      category: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }, selectedCategories.map(c => /*#__PURE__*/React.createElement(MenuItem, {\n    key: c.type,\n    value: c.type,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 44\n    }\n  }, c.type))))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    type: \"number\",\n    label: \"Amount\",\n    value: formData.amount,\n    onChange: e => setFormData({ ...formData,\n      amount: e.target.value\n    }),\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    label: \"Date\",\n    type: \"date\",\n    value: formData.date,\n    onChange: e => setFormData({ ...formData,\n      date: formatDate(e.target.value)\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    className: classes.button,\n    variant: \"outlined\",\n    color: \"primary\",\n    fullWidth: true,\n    onClick: createTransaction,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }, \"Create\"));\n};\n\n_s(NewTransactionForm, \"eNg3dzwK09FVNoGi73BxzhF0Ud4=\", false, function () {\n  return [useStyles, useSpeechContext];\n});\n\n_c = NewTransactionForm;\nexport default NewTransactionForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewTransactionForm\");","map":{"version":3,"sources":["C:/Users/hp/Desktop/expensetracker/src/components/Main/Form/Form.jsx"],"names":["React","useState","useContext","useEffect","TextField","Typography","Grid","Button","FormControl","InputLabel","Select","MenuItem","v4","uuidv4","useSpeechContext","Snackbar","formatDate","ExpenseTrackerContext","incomeCategories","expenseCategories","useStyles","InfoCard","initialState","amount","category","type","date","Date","NewTransactionForm","classes","addTransaction","formData","setFormData","segment","open","setOpen","createTransaction","Number","isNaN","includes","map","iC","id","intent","isFinal","entities","forEach","s","value","charAt","slice","toLowerCase","selectedCategories","words","w","join","e","target","c","button"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,SAASC,SAAT,EAAoBC,UAApB,EAAgCC,IAAhC,EAAsCC,MAAtC,EAA8CC,WAA9C,EAA2DC,UAA3D,EAAuEC,MAAvE,EAA+EC,QAA/E,QAA+F,mBAA/F;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AAEA,SAASC,gBAAT,QAAiC,wBAAjC;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,SAASC,qBAAT,QAAsC,0BAAtC;AACA,SAASC,gBAAT,EAA2BC,iBAA3B,QAAoD,+BAApD;AACA,OAAOC,SAAP,MAAsB,UAAtB;AACA,SAASC,QAAT,QAAyB,OAAzB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,EADW;AAEnBC,EAAAA,QAAQ,EAAE,EAFS;AAGnBC,EAAAA,IAAI,EAAE,QAHa;AAInBC,EAAAA,IAAI,EAAEV,UAAU,CAAC,IAAIW,IAAJ,EAAD;AAJG,CAArB;;AAOA,MAAMC,kBAAkB,GAAG,MAAM;AAAA;;AAC/B,QAAMC,OAAO,GAAGT,SAAS,EAAzB;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAqB5B,UAAU,CAACe,qBAAD,CAArC;AACA,QAAM,CAACc,QAAD,EAAWC,WAAX,IAA0B/B,QAAQ,CAACqB,YAAD,CAAxC;AACA,QAAM;AAAEW,IAAAA;AAAF,MAAcnB,gBAAgB,EAApC;AACA,QAAM,CAACoB,IAAD,EAAOC,OAAP,IAAkBnC,KAAK,CAACC,QAAN,CAAe,KAAf,CAAxB;;AAEA,QAAMmC,iBAAiB,GAAG,MAAM;AAC9B,QAAIC,MAAM,CAACC,KAAP,CAAaD,MAAM,CAACN,QAAQ,CAACR,MAAV,CAAnB,KAAyC,CAACQ,QAAQ,CAACL,IAAT,CAAca,QAAd,CAAuB,GAAvB,CAA9C,EAA2E;;AAE3E,QAAIrB,gBAAgB,CAACsB,GAAjB,CAAsBC,EAAD,IAAQA,EAAE,CAAChB,IAAhC,EAAsCc,QAAtC,CAA+CR,QAAQ,CAACP,QAAxD,CAAJ,EAAuE;AACrEQ,MAAAA,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAeN,QAAAA,IAAI,EAAE;AAArB,OAAD,CAAX;AACD,KAFD,MAEO,IAAIN,iBAAiB,CAACqB,GAAlB,CAAuBC,EAAD,IAAQA,EAAE,CAAChB,IAAjC,EAAuCc,QAAvC,CAAgDR,QAAQ,CAACP,QAAzD,CAAJ,EAAwE;AAC7EQ,MAAAA,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAeN,QAAAA,IAAI,EAAE;AAArB,OAAD,CAAX;AACD;;AAEDU,IAAAA,OAAO,CAAC,IAAD,CAAP;AACAL,IAAAA,cAAc,CAAC,EAAE,GAAGC,QAAL;AAAeR,MAAAA,MAAM,EAAEc,MAAM,CAACN,QAAQ,CAACR,MAAV,CAA7B;AAAgDmB,MAAAA,EAAE,EAAE7B,MAAM;AAA1D,KAAD,CAAd;AACAmB,IAAAA,WAAW,CAACV,YAAD,CAAX;AACD,GAZD;;AAcAnB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI8B,OAAJ,EAAa;AACX,UAAIA,OAAO,CAACU,MAAR,CAAeA,MAAf,KAA0B,aAA9B,EAA6C;AAC3CX,QAAAA,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAeN,UAAAA,IAAI,EAAE;AAArB,SAAD,CAAX;AACD,OAFD,MAEO,IAAIQ,OAAO,CAACU,MAAR,CAAeA,MAAf,KAA0B,YAA9B,EAA4C;AACjDX,QAAAA,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAeN,UAAAA,IAAI,EAAE;AAArB,SAAD,CAAX;AACD,OAFM,MAEA,IAAIQ,OAAO,CAACW,OAAR,IAAmBX,OAAO,CAACU,MAAR,CAAeA,MAAf,KAA0B,oBAAjD,EAAuE;AAC5E,eAAOP,iBAAiB,EAAxB;AACD,OAFM,MAEA,IAAIH,OAAO,CAACW,OAAR,IAAmBX,OAAO,CAACU,MAAR,CAAeA,MAAf,KAA0B,oBAAjD,EAAuE;AAC5E,eAAOX,WAAW,CAACV,YAAD,CAAlB;AACD;;AAEDW,MAAAA,OAAO,CAACY,QAAR,CAAiBC,OAAjB,CAA0BC,CAAD,IAAO;AAC9B,cAAMvB,QAAQ,GAAI,GAAEuB,CAAC,CAACC,KAAF,CAAQC,MAAR,CAAe,CAAf,CAAkB,GAAEF,CAAC,CAACC,KAAF,CAAQE,KAAR,CAAc,CAAd,EAAiBC,WAAjB,EAA+B,EAAvE;;AAEA,gBAAQJ,CAAC,CAACtB,IAAV;AACE,eAAK,QAAL;AACEO,YAAAA,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAeR,cAAAA,MAAM,EAAEwB,CAAC,CAACC;AAAzB,aAAD,CAAX;AACA;;AACF,eAAK,UAAL;AACE,gBAAI9B,gBAAgB,CAACsB,GAAjB,CAAsBC,EAAD,IAAQA,EAAE,CAAChB,IAAhC,EAAsCc,QAAtC,CAA+Cf,QAA/C,CAAJ,EAA8D;AAC5DQ,cAAAA,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAeN,gBAAAA,IAAI,EAAE,QAArB;AAA+BD,gBAAAA;AAA/B,eAAD,CAAX;AACD,aAFD,MAEO,IAAIL,iBAAiB,CAACqB,GAAlB,CAAuBC,EAAD,IAAQA,EAAE,CAAChB,IAAjC,EAAuCc,QAAvC,CAAgDf,QAAhD,CAAJ,EAA+D;AACpEQ,cAAAA,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAeN,gBAAAA,IAAI,EAAE,SAArB;AAAgCD,gBAAAA;AAAhC,eAAD,CAAX;AACD;;AACD;;AACF,eAAK,MAAL;AACEQ,YAAAA,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAeL,cAAAA,IAAI,EAAEqB,CAAC,CAACC;AAAvB,aAAD,CAAX;AACA;;AACF;AACE;AAfJ;AAiBD,OApBD;;AAsBA,UAAIf,OAAO,CAACW,OAAR,IAAmBb,QAAQ,CAACR,MAA5B,IAAsCQ,QAAQ,CAACP,QAA/C,IAA2DO,QAAQ,CAACN,IAApE,IAA4EM,QAAQ,CAACL,IAAzF,EAA+F;AAC7FU,QAAAA,iBAAiB;AAClB;AACF;AACF,GAtCQ,EAsCN,CAACH,OAAD,CAtCM,CAAT;AAwCA,QAAMmB,kBAAkB,GAAGrB,QAAQ,CAACN,IAAT,KAAkB,QAAlB,GAA6BP,gBAA7B,GAAgDC,iBAA3E;AAEA,sBACE,oBAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAgB,IAAA,OAAO,EAAE,CAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,QAAD;AAAU,IAAA,IAAI,EAAEe,IAAhB;AAAsB,IAAA,OAAO,EAAEC,OAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAC,QAAlB;AAA2B,IAAA,OAAO,EAAC,WAAnC;AAA+C,IAAA,YAAY,MAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCF,OAAO,gBACR;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,OAAO,CAACoB,KAAR,CAAcb,GAAd,CAAmBc,CAAD,IAAOA,CAAC,CAACN,KAA3B,EAAkCO,IAAlC,CAAuC,GAAvC,CADH,CADQ,GAIN,IALF,CADF,CAFF,eAYE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,WAAD;AAAa,IAAA,SAAS,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAExB,QAAQ,CAACN,IAAxB;AAA8B,IAAA,QAAQ,EAAG+B,CAAD,IAAOxB,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAeN,MAAAA,IAAI,EAAE+B,CAAC,CAACC,MAAF,CAAST;AAA9B,KAAD,CAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAC,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFF,CAFF,CADF,CAZF,eAqBE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,WAAD;AAAa,IAAA,SAAS,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAEjB,QAAQ,CAACP,QAAxB;AAAkC,IAAA,QAAQ,EAAGgC,CAAD,IAAOxB,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAeP,MAAAA,QAAQ,EAAEgC,CAAC,CAACC,MAAF,CAAST;AAAlC,KAAD,CAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGI,kBAAkB,CAACZ,GAAnB,CAAwBkB,CAAD,iBAAO,oBAAC,QAAD;AAAU,IAAA,GAAG,EAAEA,CAAC,CAACjC,IAAjB;AAAuB,IAAA,KAAK,EAAEiC,CAAC,CAACjC,IAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAuCiC,CAAC,CAACjC,IAAzC,CAA9B,CADH,CAFF,CADF,CArBF,eA8BE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AAAW,IAAA,IAAI,EAAC,QAAhB;AAAyB,IAAA,KAAK,EAAC,QAA/B;AAAwC,IAAA,KAAK,EAAEM,QAAQ,CAACR,MAAxD;AAAgE,IAAA,QAAQ,EAAGiC,CAAD,IAAOxB,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAeR,MAAAA,MAAM,EAAEiC,CAAC,CAACC,MAAF,CAAST;AAAhC,KAAD,CAA5F;AAAuI,IAAA,SAAS,MAAhJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CA9BF,eAiCE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AAAW,IAAA,SAAS,MAApB;AAAqB,IAAA,KAAK,EAAC,MAA3B;AAAkC,IAAA,IAAI,EAAC,MAAvC;AAA8C,IAAA,KAAK,EAAEjB,QAAQ,CAACL,IAA9D;AAAoE,IAAA,QAAQ,EAAG8B,CAAD,IAAOxB,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAeL,MAAAA,IAAI,EAAEV,UAAU,CAACwC,CAAC,CAACC,MAAF,CAAST,KAAV;AAA/B,KAAD,CAAhG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAjCF,eAoCE,oBAAC,MAAD;AAAQ,IAAA,SAAS,EAAEnB,OAAO,CAAC8B,MAA3B;AAAmC,IAAA,OAAO,EAAC,UAA3C;AAAsD,IAAA,KAAK,EAAC,SAA5D;AAAsE,IAAA,SAAS,MAA/E;AAAgF,IAAA,OAAO,EAAEvB,iBAAzF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cApCF,CADF;AA8CD,CA7GD;;GAAMR,kB;UACYR,S,EAGIN,gB;;;KAJhBc,kB;AA+GN,eAAeA,kBAAf","sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\r\nimport { TextField, Typography, Grid, Button, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport { useSpeechContext } from '@speechly/react-client';\r\nimport Snackbar from '../../Snackbar/Snackbar';\r\nimport formatDate from '../../../utils/formatDate';\r\nimport { ExpenseTrackerContext } from '../../../context/context';\r\nimport { incomeCategories, expenseCategories } from '../../../constants/categories';\r\nimport useStyles from './styles';\r\nimport { InfoCard } from '../..';\r\n\r\nconst initialState = {\r\n  amount: '',\r\n  category: '',\r\n  type: 'Income',\r\n  date: formatDate(new Date()),\r\n};\r\n\r\nconst NewTransactionForm = () => {\r\n  const classes = useStyles();\r\n  const { addTransaction } = useContext(ExpenseTrackerContext);\r\n  const [formData, setFormData] = useState(initialState);\r\n  const { segment } = useSpeechContext();\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const createTransaction = () => {\r\n    if (Number.isNaN(Number(formData.amount)) || !formData.date.includes('-')) return;\r\n\r\n    if (incomeCategories.map((iC) => iC.type).includes(formData.category)) {\r\n      setFormData({ ...formData, type: 'Income' });\r\n    } else if (expenseCategories.map((iC) => iC.type).includes(formData.category)) {\r\n      setFormData({ ...formData, type: 'Expense' });\r\n    }\r\n\r\n    setOpen(true);\r\n    addTransaction({ ...formData, amount: Number(formData.amount), id: uuidv4() });\r\n    setFormData(initialState);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (segment) {\r\n      if (segment.intent.intent === 'add_expense') {\r\n        setFormData({ ...formData, type: 'Expense' });\r\n      } else if (segment.intent.intent === 'add_income') {\r\n        setFormData({ ...formData, type: 'Income' });\r\n      } else if (segment.isFinal && segment.intent.intent === 'create_transaction') {\r\n        return createTransaction();\r\n      } else if (segment.isFinal && segment.intent.intent === 'cancel_transaction') {\r\n        return setFormData(initialState);\r\n      }\r\n\r\n      segment.entities.forEach((s) => {\r\n        const category = `${s.value.charAt(0)}${s.value.slice(1).toLowerCase()}`;\r\n\r\n        switch (s.type) {\r\n          case 'amount':\r\n            setFormData({ ...formData, amount: s.value });\r\n            break;\r\n          case 'category':\r\n            if (incomeCategories.map((iC) => iC.type).includes(category)) {\r\n              setFormData({ ...formData, type: 'Income', category });\r\n            } else if (expenseCategories.map((iC) => iC.type).includes(category)) {\r\n              setFormData({ ...formData, type: 'Expense', category });\r\n            }\r\n            break;\r\n          case 'date':\r\n            setFormData({ ...formData, date: s.value });\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      });\r\n\r\n      if (segment.isFinal && formData.amount && formData.category && formData.type && formData.date) {\r\n        createTransaction();\r\n      }\r\n    }\r\n  }, [segment]);\r\n\r\n  const selectedCategories = formData.type === 'Income' ? incomeCategories : expenseCategories;\r\n\r\n  return (\r\n    <Grid container spacing={2}>\r\n      <Snackbar open={open} setOpen={setOpen} />\r\n      <Grid item xs={12}>\r\n        <Typography align=\"center\" variant=\"subtitle2\" gutterBottom>\r\n        {segment ? (\r\n        <div className=\"segment\">\r\n          {segment.words.map((w) => w.value).join(\" \")}\r\n        </div>\r\n      ) : null}\r\n         {/* {isSpeaking ? <BigTranscript /> : 'Start adding transactions'}  */}\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item xs={3}>\r\n        <FormControl fullWidth>\r\n          <InputLabel>Type</InputLabel>\r\n          <Select value={formData.type} onChange={(e) => setFormData({ ...formData, type: e.target.value })}>\r\n            <MenuItem value=\"Income\">Income</MenuItem>\r\n            <MenuItem value=\"Expense\">Expense</MenuItem>\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n      <Grid item xs={3}>\r\n        <FormControl fullWidth>\r\n          <InputLabel>Category</InputLabel>\r\n          <Select value={formData.category} onChange={(e) => setFormData({ ...formData, category: e.target.value })}>\r\n            {selectedCategories.map((c) => <MenuItem key={c.type} value={c.type}>{c.type}</MenuItem>)}\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n\r\n      <Grid item xs={3}>\r\n        <TextField type=\"number\" label=\"Amount\" value={formData.amount} onChange={(e) => setFormData({ ...formData, amount: e.target.value })} fullWidth />\r\n      </Grid>\r\n      <Grid item xs={3}>\r\n        <TextField fullWidth label=\"Date\" type=\"date\" value={formData.date} onChange={(e) => setFormData({ ...formData, date: formatDate(e.target.value) })} />\r\n      </Grid>\r\n      <Button className={classes.button} variant=\"outlined\" color=\"primary\" fullWidth onClick={createTransaction}>Create</Button>\r\n      \r\n      \r\n    </Grid>\r\n    \r\n\r\n    \r\n    \r\n  );\r\n};\r\n\r\nexport default NewTransactionForm;\r\n"]},"metadata":{},"sourceType":"module"}