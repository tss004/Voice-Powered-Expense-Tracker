{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BigTranscript = void 0;\n\nvar react_1 = __importStar(require(\"react\"));\n\nvar react_client_1 = require(\"@speechly/react-client\");\n\nvar types_1 = require(\"../types\");\n\nrequire(\"@speechly/browser-ui/big-transcript\");\n/**\n * A React component that renders the transcript and entities received from Speechly SLU API.\n *\n * The component is intended to be used for providing visual feedback to the speaker.\n *\n * @public\n */\n\n\nvar BigTranscript = function BigTranscript(_a) {\n  var formatText = _a.formatText,\n      fontSize = _a.fontSize,\n      color = _a.color,\n      highlightColor = _a.highlightColor,\n      backgroundColor = _a.backgroundColor,\n      _b = _a.marginBottom,\n      marginBottom = _b === void 0 ? '2rem' : _b,\n      mockSegment = _a.mockSegment;\n\n  var _c = react_client_1.useSpeechContext(),\n      segment = _c.segment,\n      speechState = _c.speechState;\n\n  var refElement = react_1.useRef();\n\n  var _d = react_1.useState(false),\n      demoMode = _d[0],\n      setDemoMode = _d[1]; // Change button face according to Speechly states\n\n\n  react_1.useEffect(function () {\n    if ((refElement === null || refElement === void 0 ? void 0 : refElement.current) !== undefined && speechState !== undefined) {\n      refElement.current.speechstate(types_1.mapSpeechStateToClientState(speechState));\n    }\n  }, [speechState]);\n  react_1.useEffect(function () {\n    if ((refElement === null || refElement === void 0 ? void 0 : refElement.current) !== undefined && segment !== undefined) {\n      setDemoMode(false);\n      refElement.current.speechsegment(segment);\n    }\n  }, [segment]);\n  react_1.useEffect(function () {\n    if ((refElement === null || refElement === void 0 ? void 0 : refElement.current) !== undefined && mockSegment !== undefined) {\n      setDemoMode(true);\n      refElement.current.speechsegment(mockSegment);\n    }\n  }, [mockSegment]);\n  return react_1.default.createElement(\"big-transcript\", {\n    ref: refElement,\n    demomode: demoMode ? 'true' : 'false',\n    formattext: formatText !== null && formatText === false ? 'false' : 'true',\n    fontsize: fontSize,\n    color: color,\n    highlightcolor: highlightColor,\n    backgroundcolor: backgroundColor,\n    marginbottom: marginBottom\n  });\n};\n\nexports.BigTranscript = BigTranscript;","map":{"version":3,"sources":["../../src/components/BigTranscript.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BigTranscript = void 0;\nvar react_1 = __importStar(require(\"react\"));\nvar react_client_1 = require(\"@speechly/react-client\");\nvar types_1 = require(\"../types\");\nrequire(\"@speechly/browser-ui/big-transcript\");\n/**\n * A React component that renders the transcript and entities received from Speechly SLU API.\n *\n * The component is intended to be used for providing visual feedback to the speaker.\n *\n * @public\n */\nvar BigTranscript = function (_a) {\n    var formatText = _a.formatText, fontSize = _a.fontSize, color = _a.color, highlightColor = _a.highlightColor, backgroundColor = _a.backgroundColor, _b = _a.marginBottom, marginBottom = _b === void 0 ? '2rem' : _b, mockSegment = _a.mockSegment;\n    var _c = react_client_1.useSpeechContext(), segment = _c.segment, speechState = _c.speechState;\n    var refElement = react_1.useRef();\n    var _d = react_1.useState(false), demoMode = _d[0], setDemoMode = _d[1];\n    // Change button face according to Speechly states\n    react_1.useEffect(function () {\n        if ((refElement === null || refElement === void 0 ? void 0 : refElement.current) !== undefined && speechState !== undefined) {\n            refElement.current.speechstate(types_1.mapSpeechStateToClientState(speechState));\n        }\n    }, [speechState]);\n    react_1.useEffect(function () {\n        if ((refElement === null || refElement === void 0 ? void 0 : refElement.current) !== undefined && segment !== undefined) {\n            setDemoMode(false);\n            refElement.current.speechsegment(segment);\n        }\n    }, [segment]);\n    react_1.useEffect(function () {\n        if ((refElement === null || refElement === void 0 ? void 0 : refElement.current) !== undefined && mockSegment !== undefined) {\n            setDemoMode(true);\n            refElement.current.speechsegment(mockSegment);\n        }\n    }, [mockSegment]);\n    return (react_1.default.createElement(\"big-transcript\", { ref: refElement, demomode: demoMode ? 'true' : 'false', formattext: (formatText !== null && formatText === false) ? 'false' : 'true', fontsize: fontSize, color: color, highlightcolor: highlightColor, backgroundcolor: backgroundColor, marginbottom: marginBottom }));\n};\nexports.BigTranscript = BigTranscript;\n//# sourceMappingURL=BigTranscript.js.map"]},"metadata":{},"sourceType":"script"}