{"ast":null,"code":"/*! http://mths.be/base64 v0.1.0 by @mathias | MIT license */\n;\n\n(function (root) {\n  // Detect free variables `exports`.\n  var freeExports = typeof exports == 'object' && exports; // Detect free variable `module`.\n\n  var freeModule = typeof module == 'object' && module && module.exports == freeExports && module; // Detect free variable `global`, from Node.js or Browserified code, and use\n  // it as `root`.\n\n  var freeGlobal = typeof global == 'object' && global;\n\n  if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {\n    root = freeGlobal;\n  }\n  /*--------------------------------------------------------------------------*/\n\n\n  var InvalidCharacterError = function (message) {\n    this.message = message;\n  };\n\n  InvalidCharacterError.prototype = new Error();\n  InvalidCharacterError.prototype.name = 'InvalidCharacterError';\n\n  var error = function (message) {\n    // Note: the error messages used throughout this file match those used by\n    // the native `atob`/`btoa` implementation in Chromium.\n    throw new InvalidCharacterError(message);\n  };\n\n  var TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'; // http://whatwg.org/html/common-microsyntaxes.html#space-character\n\n  var REGEX_SPACE_CHARACTERS = /[\\t\\n\\f\\r ]/g; // `decode` is designed to be fully compatible with `atob` as described in the\n  // HTML Standard. http://whatwg.org/html/webappapis.html#dom-windowbase64-atob\n  // The optimized base64-decoding algorithm used is based on @atk’s excellent\n  // implementation. https://gist.github.com/atk/1020396\n\n  var decode = function (input) {\n    input = String(input).replace(REGEX_SPACE_CHARACTERS, '');\n    var length = input.length;\n\n    if (length % 4 == 0) {\n      input = input.replace(/==?$/, '');\n      length = input.length;\n    }\n\n    if (length % 4 == 1 || // http://whatwg.org/C#alphanumeric-ascii-characters\n    /[^+a-zA-Z0-9/]/.test(input)) {\n      error('Invalid character: the string to be decoded is not correctly encoded.');\n    }\n\n    var bitCounter = 0;\n    var bitStorage;\n    var buffer;\n    var output = '';\n    var position = -1;\n\n    while (++position < length) {\n      buffer = TABLE.indexOf(input.charAt(position));\n      bitStorage = bitCounter % 4 ? bitStorage * 64 + buffer : buffer; // Unless this is the first of a group of 4 characters…\n\n      if (bitCounter++ % 4) {\n        // …convert the first 8 bits to a single ASCII character.\n        output += String.fromCharCode(0xFF & bitStorage >> (-2 * bitCounter & 6));\n      }\n    }\n\n    return output;\n  }; // `encode` is designed to be fully compatible with `btoa` as described in the\n  // HTML Standard: http://whatwg.org/html/webappapis.html#dom-windowbase64-btoa\n\n\n  var encode = function (input) {\n    input = String(input);\n\n    if (/[^\\0-\\xFF]/.test(input)) {\n      // Note: no need to special-case astral symbols here, as surrogates are\n      // matched, and the input is supposed to only contain ASCII anyway.\n      error('The string to be encoded contains characters outside of the ' + 'Latin1 range.');\n    }\n\n    var padding = input.length % 3;\n    var output = '';\n    var position = -1;\n    var a;\n    var b;\n    var c;\n    var d;\n    var buffer; // Make sure any padding is handled outside of the loop.\n\n    var length = input.length - padding;\n\n    while (++position < length) {\n      // Read three bytes, i.e. 24 bits.\n      a = input.charCodeAt(position) << 16;\n      b = input.charCodeAt(++position) << 8;\n      c = input.charCodeAt(++position);\n      buffer = a + b + c; // Turn the 24 bits into four chunks of 6 bits each, and append the\n      // matching character for each of them to the output.\n\n      output += TABLE.charAt(buffer >> 18 & 0x3F) + TABLE.charAt(buffer >> 12 & 0x3F) + TABLE.charAt(buffer >> 6 & 0x3F) + TABLE.charAt(buffer & 0x3F);\n    }\n\n    if (padding == 2) {\n      a = input.charCodeAt(position) << 8;\n      b = input.charCodeAt(++position);\n      buffer = a + b;\n      output += TABLE.charAt(buffer >> 10) + TABLE.charAt(buffer >> 4 & 0x3F) + TABLE.charAt(buffer << 2 & 0x3F) + '=';\n    } else if (padding == 1) {\n      buffer = input.charCodeAt(position);\n      output += TABLE.charAt(buffer >> 2) + TABLE.charAt(buffer << 4 & 0x3F) + '==';\n    }\n\n    return output;\n  };\n\n  var base64 = {\n    'encode': encode,\n    'decode': decode,\n    'version': '0.1.0'\n  }; // Some AMD build optimizers, like r.js, check for specific condition patterns\n  // like the following:\n\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n    define(function () {\n      return base64;\n    });\n  } else if (freeExports && !freeExports.nodeType) {\n    if (freeModule) {\n      // in Node.js or RingoJS v0.8.0+\n      freeModule.exports = base64;\n    } else {\n      // in Narwhal or RingoJS v0.7.0-\n      for (var key in base64) {\n        base64.hasOwnProperty(key) && (freeExports[key] = base64[key]);\n      }\n    }\n  } else {\n    // in Rhino or a web browser\n    root.base64 = base64;\n  }\n})(this);","map":{"version":3,"sources":["C:/Users/hp/Desktop/Projects/Expense-Tracker/node_modules/base-64/base64.js"],"names":["root","freeExports","exports","freeModule","module","freeGlobal","global","window","InvalidCharacterError","message","prototype","Error","name","error","TABLE","REGEX_SPACE_CHARACTERS","decode","input","String","replace","length","test","bitCounter","bitStorage","buffer","output","position","indexOf","charAt","fromCharCode","encode","padding","a","b","c","d","charCodeAt","base64","define","amd","nodeType","key","hasOwnProperty"],"mappings":"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","sourcesContent":["/*! http://mths.be/base64 v0.1.0 by @mathias | MIT license */\n;(function(root) {\n\n\t// Detect free variables `exports`.\n\tvar freeExports = typeof exports == 'object' && exports;\n\n\t// Detect free variable `module`.\n\tvar freeModule = typeof module == 'object' && module &&\n\t\tmodule.exports == freeExports && module;\n\n\t// Detect free variable `global`, from Node.js or Browserified code, and use\n\t// it as `root`.\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {\n\t\troot = freeGlobal;\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\tvar InvalidCharacterError = function(message) {\n\t\tthis.message = message;\n\t};\n\tInvalidCharacterError.prototype = new Error;\n\tInvalidCharacterError.prototype.name = 'InvalidCharacterError';\n\n\tvar error = function(message) {\n\t\t// Note: the error messages used throughout this file match those used by\n\t\t// the native `atob`/`btoa` implementation in Chromium.\n\t\tthrow new InvalidCharacterError(message);\n\t};\n\n\tvar TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\t// http://whatwg.org/html/common-microsyntaxes.html#space-character\n\tvar REGEX_SPACE_CHARACTERS = /[\\t\\n\\f\\r ]/g;\n\n\t// `decode` is designed to be fully compatible with `atob` as described in the\n\t// HTML Standard. http://whatwg.org/html/webappapis.html#dom-windowbase64-atob\n\t// The optimized base64-decoding algorithm used is based on @atk’s excellent\n\t// implementation. https://gist.github.com/atk/1020396\n\tvar decode = function(input) {\n\t\tinput = String(input)\n\t\t\t.replace(REGEX_SPACE_CHARACTERS, '');\n\t\tvar length = input.length;\n\t\tif (length % 4 == 0) {\n\t\t\tinput = input.replace(/==?$/, '');\n\t\t\tlength = input.length;\n\t\t}\n\t\tif (\n\t\t\tlength % 4 == 1 ||\n\t\t\t// http://whatwg.org/C#alphanumeric-ascii-characters\n\t\t\t/[^+a-zA-Z0-9/]/.test(input)\n\t\t) {\n\t\t\terror(\n\t\t\t\t'Invalid character: the string to be decoded is not correctly encoded.'\n\t\t\t);\n\t\t}\n\t\tvar bitCounter = 0;\n\t\tvar bitStorage;\n\t\tvar buffer;\n\t\tvar output = '';\n\t\tvar position = -1;\n\t\twhile (++position < length) {\n\t\t\tbuffer = TABLE.indexOf(input.charAt(position));\n\t\t\tbitStorage = bitCounter % 4 ? bitStorage * 64 + buffer : buffer;\n\t\t\t// Unless this is the first of a group of 4 characters…\n\t\t\tif (bitCounter++ % 4) {\n\t\t\t\t// …convert the first 8 bits to a single ASCII character.\n\t\t\t\toutput += String.fromCharCode(\n\t\t\t\t\t0xFF & bitStorage >> (-2 * bitCounter & 6)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t};\n\n\t// `encode` is designed to be fully compatible with `btoa` as described in the\n\t// HTML Standard: http://whatwg.org/html/webappapis.html#dom-windowbase64-btoa\n\tvar encode = function(input) {\n\t\tinput = String(input);\n\t\tif (/[^\\0-\\xFF]/.test(input)) {\n\t\t\t// Note: no need to special-case astral symbols here, as surrogates are\n\t\t\t// matched, and the input is supposed to only contain ASCII anyway.\n\t\t\terror(\n\t\t\t\t'The string to be encoded contains characters outside of the ' +\n\t\t\t\t'Latin1 range.'\n\t\t\t);\n\t\t}\n\t\tvar padding = input.length % 3;\n\t\tvar output = '';\n\t\tvar position = -1;\n\t\tvar a;\n\t\tvar b;\n\t\tvar c;\n\t\tvar d;\n\t\tvar buffer;\n\t\t// Make sure any padding is handled outside of the loop.\n\t\tvar length = input.length - padding;\n\n\t\twhile (++position < length) {\n\t\t\t// Read three bytes, i.e. 24 bits.\n\t\t\ta = input.charCodeAt(position) << 16;\n\t\t\tb = input.charCodeAt(++position) << 8;\n\t\t\tc = input.charCodeAt(++position);\n\t\t\tbuffer = a + b + c;\n\t\t\t// Turn the 24 bits into four chunks of 6 bits each, and append the\n\t\t\t// matching character for each of them to the output.\n\t\t\toutput += (\n\t\t\t\tTABLE.charAt(buffer >> 18 & 0x3F) +\n\t\t\t\tTABLE.charAt(buffer >> 12 & 0x3F) +\n\t\t\t\tTABLE.charAt(buffer >> 6 & 0x3F) +\n\t\t\t\tTABLE.charAt(buffer & 0x3F)\n\t\t\t);\n\t\t}\n\n\t\tif (padding == 2) {\n\t\t\ta = input.charCodeAt(position) << 8;\n\t\t\tb = input.charCodeAt(++position);\n\t\t\tbuffer = a + b;\n\t\t\toutput += (\n\t\t\t\tTABLE.charAt(buffer >> 10) +\n\t\t\t\tTABLE.charAt((buffer >> 4) & 0x3F) +\n\t\t\t\tTABLE.charAt((buffer << 2) & 0x3F) +\n\t\t\t\t'='\n\t\t\t);\n\t\t} else if (padding == 1) {\n\t\t\tbuffer = input.charCodeAt(position);\n\t\t\toutput += (\n\t\t\t\tTABLE.charAt(buffer >> 2) +\n\t\t\t\tTABLE.charAt((buffer << 4) & 0x3F) +\n\t\t\t\t'=='\n\t\t\t);\n\t\t}\n\n\t\treturn output;\n\t};\n\n\tvar base64 = {\n\t\t'encode': encode,\n\t\t'decode': decode,\n\t\t'version': '0.1.0'\n\t};\n\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine(function() {\n\t\t\treturn base64;\n\t\t});\n\t}\telse if (freeExports && !freeExports.nodeType) {\n\t\tif (freeModule) { // in Node.js or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = base64;\n\t\t} else { // in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (var key in base64) {\n\t\t\t\tbase64.hasOwnProperty(key) && (freeExports[key] = base64[key]);\n\t\t\t}\n\t\t}\n\t} else { // in Rhino or a web browser\n\t\troot.base64 = base64;\n\t}\n\n}(this));\n"]},"metadata":{},"sourceType":"script"}