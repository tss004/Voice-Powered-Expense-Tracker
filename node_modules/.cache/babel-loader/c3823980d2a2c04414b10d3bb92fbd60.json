{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PushToTalkButton = void 0;\n\nvar react_1 = __importStar(require(\"react\"));\n\nvar react_client_1 = require(\"@speechly/react-client\");\n\nvar pubsub_js_1 = __importDefault(require(\"pubsub-js\"));\n\nvar types_1 = require(\"../types\");\n\nrequire(\"@speechly/browser-ui/holdable-button\");\n\nrequire(\"@speechly/browser-ui/call-out\");\n/**\n * A React component that renders a push-to-talk microphone button.\n *\n * Make sure to place this component inside your `SpeechProvider` component imported from `@speechly/react-client`.\n *\n * @public\n */\n\n\nvar PushToTalkButton = function (_a) {\n  var _b = _a.powerOn,\n      powerOn = _b === void 0 ? false : _b,\n      _c = _a.hide,\n      hide = _c === void 0 ? false : _c,\n      captureKey = _a.captureKey,\n      _d = _a.size,\n      size = _d === void 0 ? '6.0rem' : _d,\n      _e = _a.gradientStops,\n      gradientStops = _e === void 0 ? ['#15e8b5', '#4fa1f9'] : _e,\n      _f = _a.intro,\n      intro = _f === void 0 ? 'Hold to talk' : _f,\n      _g = _a.hint,\n      hint = _g === void 0 ? 'Hold to talk' : _g,\n      fontSize = _a.fontSize,\n      showTime = _a.showTime,\n      textColor = _a.textColor,\n      backgroundColor = _a.backgroundColor;\n\n  var _h = react_client_1.useSpeechContext(),\n      speechState = _h.speechState,\n      toggleRecording = _h.toggleRecording,\n      initialise = _h.initialise;\n\n  var _j = react_1.useState(powerOn ? react_client_1.SpeechState.Idle : react_client_1.SpeechState.Ready),\n      icon = _j[0],\n      setIcon = _j[1];\n\n  var _k = react_1.useState(intro),\n      hintText = _k[0],\n      setHintText = _k[1];\n\n  var _l = react_1.useState(true),\n      showHint = _l[0],\n      setShowHint = _l[1];\n\n  var buttonRef = react_1.useRef();\n  var speechStateRef = react_1.useRef();\n  var SHORT_PRESS_TRESHOLD_MS = 600; // make stateRef always have the current count\n  // your \"fixed\" callbacks can refer to this object whenever\n  // they need the current value.  Note: the callbacks will not\n  // be reactive - they will not re-run the instant state changes,\n  // but they *will* see the current value whenever they do run\n\n  speechStateRef.current = speechState;\n  react_1.useEffect(function () {\n    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n    if (buttonRef === null || buttonRef === void 0 ? void 0 : buttonRef.current) {\n      var button = buttonRef.current;\n      button.onholdstart = tangentPressAction;\n      button.onholdend = tangentReleaseAction;\n    }\n  });\n  react_1.useEffect(function () {\n    var _a; // Change button face according to Speechly states\n\n\n    if (!powerOn && speechState === react_client_1.SpeechState.Idle) {\n      setIcon(react_client_1.SpeechState.Ready);\n    } else {\n      setIcon(speechState);\n    } // Automatically start recording if button held\n\n\n    if (!powerOn && ((_a = buttonRef === null || buttonRef === void 0 ? void 0 : buttonRef.current) === null || _a === void 0 ? void 0 : _a.isbuttonpressed()) === true && speechState === react_client_1.SpeechState.Ready) {\n      toggleRecording().catch(function (err) {\n        return console.error('Error while starting to record', err);\n      });\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [speechState]);\n\n  var tangentPressAction = function () {\n    pubsub_js_1.default.publish(types_1.SpeechlyUiEvents.TangentPress, {\n      state: speechStateRef.current\n    });\n    window.postMessage({\n      type: 'holdstart'\n    }, '*');\n    setShowHint(false);\n\n    switch (speechStateRef.current) {\n      case react_client_1.SpeechState.Idle:\n      case react_client_1.SpeechState.Failed:\n        // Speechly & Mic initialise needs to be in a function triggered by event handler\n        // otherwise it won't work reliably on Safari iOS as of 11/2020\n        initialise().catch(function (err) {\n          return console.error('Error initiasing Speechly', err);\n        });\n        break;\n\n      case react_client_1.SpeechState.Ready:\n        toggleRecording().catch(function (err) {\n          return console.error('Error while starting to record', err);\n        });\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  var tangentReleaseAction = function (event) {\n    pubsub_js_1.default.publish(types_1.SpeechlyUiEvents.TangentRelease, {\n      state: speechStateRef.current,\n      timeMs: event.timeMs\n    });\n    window.postMessage({\n      type: 'holdend'\n    }, '*');\n\n    switch (speechStateRef === null || speechStateRef === void 0 ? void 0 : speechStateRef.current) {\n      case react_client_1.SpeechState.Ready:\n      case react_client_1.SpeechState.Recording:\n      case react_client_1.SpeechState.Connecting:\n      case react_client_1.SpeechState.Loading:\n        if (event.timeMs < SHORT_PRESS_TRESHOLD_MS) {\n          console.log(speechStateRef === null || speechStateRef === void 0 ? void 0 : speechStateRef.current);\n          setHintText(hint);\n          setShowHint(true);\n        }\n\n        break;\n    }\n\n    switch (speechStateRef.current) {\n      case react_client_1.SpeechState.Recording:\n        toggleRecording().catch(function (err) {\n          return console.error('Error while stopping recording', err);\n        });\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  return react_1.default.createElement(\"div\", null, react_1.default.createElement(\"holdable-button\", {\n    ref: buttonRef,\n    poweron: powerOn,\n    capturekey: captureKey,\n    icon: icon,\n    size: size,\n    gradientstop1: gradientStops[0],\n    gradientstop2: gradientStops[1],\n    hide: hide ? 'true' : 'false'\n  }), react_1.default.createElement(\"call-out\", {\n    show: showHint && hintText !== '',\n    fontsize: fontSize,\n    textcolor: textColor,\n    backgroundcolor: backgroundColor,\n    showtime: showTime\n  }, hintText));\n};\n\nexports.PushToTalkButton = PushToTalkButton;","map":{"version":3,"sources":["../../src/components/PushToTalkButton.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PushToTalkButton = void 0;\nvar react_1 = __importStar(require(\"react\"));\nvar react_client_1 = require(\"@speechly/react-client\");\nvar pubsub_js_1 = __importDefault(require(\"pubsub-js\"));\nvar types_1 = require(\"../types\");\nrequire(\"@speechly/browser-ui/holdable-button\");\nrequire(\"@speechly/browser-ui/call-out\");\n/**\n * A React component that renders a push-to-talk microphone button.\n *\n * Make sure to place this component inside your `SpeechProvider` component imported from `@speechly/react-client`.\n *\n * @public\n */\nvar PushToTalkButton = function (_a) {\n    var _b = _a.powerOn, powerOn = _b === void 0 ? false : _b, _c = _a.hide, hide = _c === void 0 ? false : _c, captureKey = _a.captureKey, _d = _a.size, size = _d === void 0 ? '6.0rem' : _d, _e = _a.gradientStops, gradientStops = _e === void 0 ? ['#15e8b5', '#4fa1f9'] : _e, _f = _a.intro, intro = _f === void 0 ? 'Hold to talk' : _f, _g = _a.hint, hint = _g === void 0 ? 'Hold to talk' : _g, fontSize = _a.fontSize, showTime = _a.showTime, textColor = _a.textColor, backgroundColor = _a.backgroundColor;\n    var _h = react_client_1.useSpeechContext(), speechState = _h.speechState, toggleRecording = _h.toggleRecording, initialise = _h.initialise;\n    var _j = react_1.useState((powerOn ? react_client_1.SpeechState.Idle : react_client_1.SpeechState.Ready)), icon = _j[0], setIcon = _j[1];\n    var _k = react_1.useState(intro), hintText = _k[0], setHintText = _k[1];\n    var _l = react_1.useState(true), showHint = _l[0], setShowHint = _l[1];\n    var buttonRef = react_1.useRef();\n    var speechStateRef = react_1.useRef();\n    var SHORT_PRESS_TRESHOLD_MS = 600;\n    // make stateRef always have the current count\n    // your \"fixed\" callbacks can refer to this object whenever\n    // they need the current value.  Note: the callbacks will not\n    // be reactive - they will not re-run the instant state changes,\n    // but they *will* see the current value whenever they do run\n    speechStateRef.current = speechState;\n    react_1.useEffect(function () {\n        // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n        if (buttonRef === null || buttonRef === void 0 ? void 0 : buttonRef.current) {\n            var button = buttonRef.current;\n            button.onholdstart = tangentPressAction;\n            button.onholdend = tangentReleaseAction;\n        }\n    });\n    react_1.useEffect(function () {\n        var _a;\n        // Change button face according to Speechly states\n        if (!powerOn && speechState === react_client_1.SpeechState.Idle) {\n            setIcon(react_client_1.SpeechState.Ready);\n        }\n        else {\n            setIcon(speechState);\n        }\n        // Automatically start recording if button held\n        if (!powerOn && ((_a = buttonRef === null || buttonRef === void 0 ? void 0 : buttonRef.current) === null || _a === void 0 ? void 0 : _a.isbuttonpressed()) === true && speechState === react_client_1.SpeechState.Ready) {\n            toggleRecording().catch(function (err) { return console.error('Error while starting to record', err); });\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [speechState]);\n    var tangentPressAction = function () {\n        pubsub_js_1.default.publish(types_1.SpeechlyUiEvents.TangentPress, { state: speechStateRef.current });\n        window.postMessage({ type: 'holdstart' }, '*');\n        setShowHint(false);\n        switch (speechStateRef.current) {\n            case react_client_1.SpeechState.Idle:\n            case react_client_1.SpeechState.Failed:\n                // Speechly & Mic initialise needs to be in a function triggered by event handler\n                // otherwise it won't work reliably on Safari iOS as of 11/2020\n                initialise().catch(function (err) { return console.error('Error initiasing Speechly', err); });\n                break;\n            case react_client_1.SpeechState.Ready:\n                toggleRecording().catch(function (err) { return console.error('Error while starting to record', err); });\n                break;\n            default:\n                break;\n        }\n    };\n    var tangentReleaseAction = function (event) {\n        pubsub_js_1.default.publish(types_1.SpeechlyUiEvents.TangentRelease, { state: speechStateRef.current, timeMs: event.timeMs });\n        window.postMessage({ type: 'holdend' }, '*');\n        switch (speechStateRef === null || speechStateRef === void 0 ? void 0 : speechStateRef.current) {\n            case react_client_1.SpeechState.Ready:\n            case react_client_1.SpeechState.Recording:\n            case react_client_1.SpeechState.Connecting:\n            case react_client_1.SpeechState.Loading:\n                if (event.timeMs < SHORT_PRESS_TRESHOLD_MS) {\n                    console.log(speechStateRef === null || speechStateRef === void 0 ? void 0 : speechStateRef.current);\n                    setHintText(hint);\n                    setShowHint(true);\n                }\n                break;\n        }\n        switch (speechStateRef.current) {\n            case react_client_1.SpeechState.Recording:\n                toggleRecording().catch(function (err) { return console.error('Error while stopping recording', err); });\n                break;\n            default:\n                break;\n        }\n    };\n    return (react_1.default.createElement(\"div\", null,\n        react_1.default.createElement(\"holdable-button\", { ref: buttonRef, poweron: powerOn, capturekey: captureKey, icon: icon, size: size, gradientstop1: gradientStops[0], gradientstop2: gradientStops[1], hide: hide ? 'true' : 'false' }),\n        react_1.default.createElement(\"call-out\", { show: showHint && hintText !== '', fontsize: fontSize, textcolor: textColor, backgroundcolor: backgroundColor, showtime: showTime }, hintText)));\n};\nexports.PushToTalkButton = PushToTalkButton;\n//# sourceMappingURL=PushToTalkButton.js.map"]},"metadata":{},"sourceType":"script"}