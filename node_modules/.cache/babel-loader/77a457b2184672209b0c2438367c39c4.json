{"ast":null,"code":"var kindOf = require('./kindOf');\n\nvar isPlainObject = require('./isPlainObject');\n\nvar mixIn = require('../object/mixIn');\n/**\n * Clone native types.\n */\n\n\nfunction clone(val) {\n  switch (kindOf(val)) {\n    case 'Object':\n      return cloneObject(val);\n\n    case 'Array':\n      return cloneArray(val);\n\n    case 'RegExp':\n      return cloneRegExp(val);\n\n    case 'Date':\n      return cloneDate(val);\n\n    default:\n      return val;\n  }\n}\n\nfunction cloneObject(source) {\n  if (isPlainObject(source)) {\n    return mixIn({}, source);\n  } else {\n    return source;\n  }\n}\n\nfunction cloneRegExp(r) {\n  var flags = '';\n  flags += r.multiline ? 'm' : '';\n  flags += r.global ? 'g' : '';\n  flags += r.ignoreCase ? 'i' : '';\n  return new RegExp(r.source, flags);\n}\n\nfunction cloneDate(date) {\n  return new Date(+date);\n}\n\nfunction cloneArray(arr) {\n  return arr.slice();\n}\n\nmodule.exports = clone;","map":{"version":3,"sources":["C:/Users/hp/Desktop/expensetracker/node_modules/mout/lang/clone.js"],"names":["kindOf","require","isPlainObject","mixIn","clone","val","cloneObject","cloneArray","cloneRegExp","cloneDate","source","r","flags","multiline","global","ignoreCase","RegExp","date","Date","arr","slice","module","exports"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAApB;;AACA,IAAIC,aAAa,GAAGD,OAAO,CAAC,iBAAD,CAA3B;;AACA,IAAIE,KAAK,GAAGF,OAAO,CAAC,iBAAD,CAAnB;AAEI;AACJ;AACA;;;AACI,SAASG,KAAT,CAAeC,GAAf,EAAmB;AACf,UAAQL,MAAM,CAACK,GAAD,CAAd;AACI,SAAK,QAAL;AACI,aAAOC,WAAW,CAACD,GAAD,CAAlB;;AACJ,SAAK,OAAL;AACI,aAAOE,UAAU,CAACF,GAAD,CAAjB;;AACJ,SAAK,QAAL;AACI,aAAOG,WAAW,CAACH,GAAD,CAAlB;;AACJ,SAAK,MAAL;AACI,aAAOI,SAAS,CAACJ,GAAD,CAAhB;;AACJ;AACI,aAAOA,GAAP;AAVR;AAYH;;AAED,SAASC,WAAT,CAAqBI,MAArB,EAA6B;AACzB,MAAIR,aAAa,CAACQ,MAAD,CAAjB,EAA2B;AACvB,WAAOP,KAAK,CAAC,EAAD,EAAKO,MAAL,CAAZ;AACH,GAFD,MAEO;AACH,WAAOA,MAAP;AACH;AACJ;;AAED,SAASF,WAAT,CAAqBG,CAArB,EAAwB;AACpB,MAAIC,KAAK,GAAG,EAAZ;AACAA,EAAAA,KAAK,IAAID,CAAC,CAACE,SAAF,GAAc,GAAd,GAAoB,EAA7B;AACAD,EAAAA,KAAK,IAAID,CAAC,CAACG,MAAF,GAAW,GAAX,GAAiB,EAA1B;AACAF,EAAAA,KAAK,IAAID,CAAC,CAACI,UAAF,GAAe,GAAf,GAAqB,EAA9B;AACA,SAAO,IAAIC,MAAJ,CAAWL,CAAC,CAACD,MAAb,EAAqBE,KAArB,CAAP;AACH;;AAED,SAASH,SAAT,CAAmBQ,IAAnB,EAAyB;AACrB,SAAO,IAAIC,IAAJ,CAAS,CAACD,IAAV,CAAP;AACH;;AAED,SAASV,UAAT,CAAoBY,GAApB,EAAyB;AACrB,SAAOA,GAAG,CAACC,KAAJ,EAAP;AACH;;AAEDC,MAAM,CAACC,OAAP,GAAiBlB,KAAjB","sourcesContent":["var kindOf = require('./kindOf');\nvar isPlainObject = require('./isPlainObject');\nvar mixIn = require('../object/mixIn');\n\n    /**\n     * Clone native types.\n     */\n    function clone(val){\n        switch (kindOf(val)) {\n            case 'Object':\n                return cloneObject(val);\n            case 'Array':\n                return cloneArray(val);\n            case 'RegExp':\n                return cloneRegExp(val);\n            case 'Date':\n                return cloneDate(val);\n            default:\n                return val;\n        }\n    }\n\n    function cloneObject(source) {\n        if (isPlainObject(source)) {\n            return mixIn({}, source);\n        } else {\n            return source;\n        }\n    }\n\n    function cloneRegExp(r) {\n        var flags = '';\n        flags += r.multiline ? 'm' : '';\n        flags += r.global ? 'g' : '';\n        flags += r.ignoreCase ? 'i' : '';\n        return new RegExp(r.source, flags);\n    }\n\n    function cloneDate(date) {\n        return new Date(+date);\n    }\n\n    function cloneArray(arr) {\n        return arr.slice();\n    }\n\n    module.exports = clone;\n\n\n"]},"metadata":{},"sourceType":"script"}