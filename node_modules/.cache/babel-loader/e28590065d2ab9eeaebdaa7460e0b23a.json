{"ast":null,"code":"var hasOwn = require('./hasOwn');\n\nvar _hasDontEnumBug, _dontEnums;\n\nfunction checkDontEnum() {\n  _dontEnums = ['toString', 'toLocaleString', 'valueOf', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'constructor'];\n  _hasDontEnumBug = true;\n\n  for (var key in {\n    'toString': null\n  }) {\n    _hasDontEnumBug = false;\n  }\n}\n/**\n * Similar to Array/forEach but works over object properties and fixes Don't\n * Enum bug on IE.\n * based on: http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation\n */\n\n\nfunction forIn(obj, fn, thisObj) {\n  var key,\n      i = 0; // no need to check if argument is a real object that way we can use\n  // it for arrays, functions, date, etc.\n  //post-pone check till needed\n\n  if (_hasDontEnumBug == null) checkDontEnum();\n\n  for (key in obj) {\n    if (exec(fn, obj, key, thisObj) === false) {\n      break;\n    }\n  }\n\n  if (_hasDontEnumBug) {\n    var ctor = obj.constructor,\n        isProto = !!ctor && obj === ctor.prototype;\n\n    while (key = _dontEnums[i++]) {\n      // For constructor, if it is a prototype object the constructor\n      // is always non-enumerable unless defined otherwise (and\n      // enumerated above).  For non-prototype objects, it will have\n      // to be defined on this object, since it cannot be defined on\n      // any prototype objects.\n      //\n      // For other [[DontEnum]] properties, check if the value is\n      // different than Object prototype value.\n      if ((key !== 'constructor' || !isProto && hasOwn(obj, key)) && obj[key] !== Object.prototype[key]) {\n        if (exec(fn, obj, key, thisObj) === false) {\n          break;\n        }\n      }\n    }\n  }\n}\n\nfunction exec(fn, obj, key, thisObj) {\n  return fn.call(thisObj, obj[key], key, obj);\n}\n\nmodule.exports = forIn;","map":{"version":3,"sources":["C:/Users/hp/Desktop/expensetracker/node_modules/mout/object/forIn.js"],"names":["hasOwn","require","_hasDontEnumBug","_dontEnums","checkDontEnum","key","forIn","obj","fn","thisObj","i","exec","ctor","constructor","isProto","prototype","Object","call","module","exports"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAApB;;AAEI,IAAIC,eAAJ,EACIC,UADJ;;AAGA,SAASC,aAAT,GAAwB;AACpBD,EAAAA,UAAU,GAAG,CACL,UADK,EAEL,gBAFK,EAGL,SAHK,EAIL,gBAJK,EAKL,eALK,EAML,sBANK,EAOL,aAPK,CAAb;AAUAD,EAAAA,eAAe,GAAG,IAAlB;;AAEA,OAAK,IAAIG,GAAT,IAAgB;AAAC,gBAAY;AAAb,GAAhB,EAAoC;AAChCH,IAAAA,eAAe,GAAG,KAAlB;AACH;AACJ;AAED;AACJ;AACA;AACA;AACA;;;AACI,SAASI,KAAT,CAAeC,GAAf,EAAoBC,EAApB,EAAwBC,OAAxB,EAAgC;AAC5B,MAAIJ,GAAJ;AAAA,MAASK,CAAC,GAAG,CAAb,CAD4B,CAE5B;AACA;AAEA;;AACA,MAAIR,eAAe,IAAI,IAAvB,EAA6BE,aAAa;;AAE1C,OAAKC,GAAL,IAAYE,GAAZ,EAAiB;AACb,QAAII,IAAI,CAACH,EAAD,EAAKD,GAAL,EAAUF,GAAV,EAAeI,OAAf,CAAJ,KAAgC,KAApC,EAA2C;AACvC;AACH;AACJ;;AAGD,MAAIP,eAAJ,EAAqB;AACjB,QAAIU,IAAI,GAAGL,GAAG,CAACM,WAAf;AAAA,QACIC,OAAO,GAAG,CAAC,CAACF,IAAF,IAAUL,GAAG,KAAKK,IAAI,CAACG,SADrC;;AAGA,WAAOV,GAAG,GAAGF,UAAU,CAACO,CAAC,EAAF,CAAvB,EAA8B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UACI,CAACL,GAAG,KAAK,aAAR,IACI,CAACS,OAAD,IAAYd,MAAM,CAACO,GAAD,EAAMF,GAAN,CADvB,KAEAE,GAAG,CAACF,GAAD,CAAH,KAAaW,MAAM,CAACD,SAAP,CAAiBV,GAAjB,CAHjB,EAIE;AACE,YAAIM,IAAI,CAACH,EAAD,EAAKD,GAAL,EAAUF,GAAV,EAAeI,OAAf,CAAJ,KAAgC,KAApC,EAA2C;AACvC;AACH;AACJ;AACJ;AACJ;AACJ;;AAED,SAASE,IAAT,CAAcH,EAAd,EAAkBD,GAAlB,EAAuBF,GAAvB,EAA4BI,OAA5B,EAAoC;AAChC,SAAOD,EAAE,CAACS,IAAH,CAAQR,OAAR,EAAiBF,GAAG,CAACF,GAAD,CAApB,EAA2BA,GAA3B,EAAgCE,GAAhC,CAAP;AACH;;AAEDW,MAAM,CAACC,OAAP,GAAiBb,KAAjB","sourcesContent":["var hasOwn = require('./hasOwn');\n\n    var _hasDontEnumBug,\n        _dontEnums;\n\n    function checkDontEnum(){\n        _dontEnums = [\n                'toString',\n                'toLocaleString',\n                'valueOf',\n                'hasOwnProperty',\n                'isPrototypeOf',\n                'propertyIsEnumerable',\n                'constructor'\n            ];\n\n        _hasDontEnumBug = true;\n\n        for (var key in {'toString': null}) {\n            _hasDontEnumBug = false;\n        }\n    }\n\n    /**\n     * Similar to Array/forEach but works over object properties and fixes Don't\n     * Enum bug on IE.\n     * based on: http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation\n     */\n    function forIn(obj, fn, thisObj){\n        var key, i = 0;\n        // no need to check if argument is a real object that way we can use\n        // it for arrays, functions, date, etc.\n\n        //post-pone check till needed\n        if (_hasDontEnumBug == null) checkDontEnum();\n\n        for (key in obj) {\n            if (exec(fn, obj, key, thisObj) === false) {\n                break;\n            }\n        }\n\n\n        if (_hasDontEnumBug) {\n            var ctor = obj.constructor,\n                isProto = !!ctor && obj === ctor.prototype;\n\n            while (key = _dontEnums[i++]) {\n                // For constructor, if it is a prototype object the constructor\n                // is always non-enumerable unless defined otherwise (and\n                // enumerated above).  For non-prototype objects, it will have\n                // to be defined on this object, since it cannot be defined on\n                // any prototype objects.\n                //\n                // For other [[DontEnum]] properties, check if the value is\n                // different than Object prototype value.\n                if (\n                    (key !== 'constructor' ||\n                        (!isProto && hasOwn(obj, key))) &&\n                    obj[key] !== Object.prototype[key]\n                ) {\n                    if (exec(fn, obj, key, thisObj) === false) {\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    function exec(fn, obj, key, thisObj){\n        return fn.call(thisObj, obj[key], key, obj);\n    }\n\n    module.exports = forIn;\n\n\n"]},"metadata":{},"sourceType":"script"}