{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst types_1 = require(\"./types\");\n\nconst worker_1 = __importDefault(require(\"./worker\"));\n\nclass WebWorkerController {\n  constructor() {\n    this.startCbs = [];\n    this.stopCbs = [];\n\n    this.onResponseCb = () => {};\n\n    this.onCloseCb = () => {};\n\n    this.onWebsocketMessage = event => {\n      const response = event.data;\n\n      switch (response.type) {\n        case types_1.WebsocketResponseType.Opened:\n          if (this.resolveInitialization != null) {\n            this.resolveInitialization();\n          }\n\n          break;\n\n        case types_1.WebsocketResponseType.SourceSampleRateSetSuccess:\n          if (this.resolveSourceSampleRateSet != null) {\n            this.resolveSourceSampleRateSet();\n          }\n\n          break;\n\n        case types_1.WebsocketResponseType.Started:\n          this.startCbs.forEach(cb => {\n            try {\n              cb(undefined, response.audio_context);\n            } catch (e) {\n              console.error('[SpeechlyClient] Error while invoking \"onStart\" callback:', e);\n            }\n          });\n          this.startCbs.length = 0;\n          break;\n\n        case types_1.WebsocketResponseType.Stopped:\n          this.stopCbs.forEach(cb => {\n            try {\n              cb(undefined, response.audio_context);\n            } catch (e) {\n              console.error('[SpeechlyClient] Error while invoking \"onStop\" callback:', e);\n            }\n          });\n          this.stopCbs.length = 0;\n          break;\n\n        default:\n          this.onResponseCb(response);\n      }\n    };\n\n    const blob = new Blob([worker_1.default], {\n      type: 'text/javascript'\n    });\n    const blobURL = window.URL.createObjectURL(blob);\n    this.worker = new Worker(blobURL);\n    this.worker.addEventListener('message', this.onWebsocketMessage);\n  }\n\n  onResponse(cb) {\n    this.onResponseCb = cb;\n  }\n\n  onClose(cb) {\n    this.onCloseCb = cb;\n  }\n\n  initialize(apiUrl, authToken, targetSampleRate, debug) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.worker.postMessage({\n        type: 'INIT',\n        apiUrl,\n        authToken,\n        targetSampleRate,\n        debug\n      });\n      return new Promise(resolve => {\n        this.resolveInitialization = resolve;\n      });\n    });\n  }\n\n  setSourceSampleRate(sourceSampleRate) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.worker.postMessage({\n        type: 'SET_SOURSE_SAMPLE_RATE',\n        sourceSampleRate\n      });\n      return new Promise(resolve => {\n        this.resolveSourceSampleRateSet = resolve;\n      });\n    });\n  }\n\n  close() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.worker.postMessage({\n          type: 'CLOSE',\n          code: 1000,\n          message: 'Client has ended the session'\n        });\n        resolve();\n      });\n    });\n  }\n\n  startContext(appId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.startCbs.push((err, id) => {\n          if (err !== undefined) {\n            reject(err);\n          } else {\n            resolve(id);\n          }\n        });\n\n        if (appId != null) {\n          this.worker.postMessage({\n            type: 'START_CONTEXT',\n            appId\n          });\n        } else {\n          this.worker.postMessage({\n            type: 'START_CONTEXT'\n          });\n        }\n      });\n    });\n  }\n\n  stopContext() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.stopCbs.push((err, id) => {\n          if (err !== undefined) {\n            reject(err);\n          } else {\n            resolve(id);\n          }\n        });\n        this.worker.postMessage({\n          type: 'STOP_CONTEXT'\n        });\n      });\n    });\n  }\n\n  switchContext(appId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.startCbs.push((err, id) => {\n          if (err !== undefined) {\n            reject(err);\n          } else {\n            resolve(id);\n          }\n        });\n        this.worker.postMessage({\n          type: 'SWITCH_CONTEXT',\n          appId\n        });\n      });\n    });\n  }\n\n  postMessage(message) {\n    this.worker.postMessage(message);\n  }\n\n  sendAudio(audioChunk) {\n    this.worker.postMessage({\n      type: 'AUDIO',\n      payload: audioChunk\n    });\n  }\n\n}\n\nexports.WebWorkerController = WebWorkerController;","map":{"version":3,"sources":["../../src/websocket/webWorkerController.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst types_1 = require(\"./types\");\nconst worker_1 = __importDefault(require(\"./worker\"));\nclass WebWorkerController {\n    constructor() {\n        this.startCbs = [];\n        this.stopCbs = [];\n        this.onResponseCb = () => { };\n        this.onCloseCb = () => { };\n        this.onWebsocketMessage = (event) => {\n            const response = event.data;\n            switch (response.type) {\n                case types_1.WebsocketResponseType.Opened:\n                    if (this.resolveInitialization != null) {\n                        this.resolveInitialization();\n                    }\n                    break;\n                case types_1.WebsocketResponseType.SourceSampleRateSetSuccess:\n                    if (this.resolveSourceSampleRateSet != null) {\n                        this.resolveSourceSampleRateSet();\n                    }\n                    break;\n                case types_1.WebsocketResponseType.Started:\n                    this.startCbs.forEach(cb => {\n                        try {\n                            cb(undefined, response.audio_context);\n                        }\n                        catch (e) {\n                            console.error('[SpeechlyClient] Error while invoking \"onStart\" callback:', e);\n                        }\n                    });\n                    this.startCbs.length = 0;\n                    break;\n                case types_1.WebsocketResponseType.Stopped:\n                    this.stopCbs.forEach(cb => {\n                        try {\n                            cb(undefined, response.audio_context);\n                        }\n                        catch (e) {\n                            console.error('[SpeechlyClient] Error while invoking \"onStop\" callback:', e);\n                        }\n                    });\n                    this.stopCbs.length = 0;\n                    break;\n                default:\n                    this.onResponseCb(response);\n            }\n        };\n        const blob = new Blob([worker_1.default], { type: 'text/javascript' });\n        const blobURL = window.URL.createObjectURL(blob);\n        this.worker = new Worker(blobURL);\n        this.worker.addEventListener('message', this.onWebsocketMessage);\n    }\n    onResponse(cb) {\n        this.onResponseCb = cb;\n    }\n    onClose(cb) {\n        this.onCloseCb = cb;\n    }\n    initialize(apiUrl, authToken, targetSampleRate, debug) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.worker.postMessage({\n                type: 'INIT',\n                apiUrl,\n                authToken,\n                targetSampleRate,\n                debug,\n            });\n            return new Promise(resolve => {\n                this.resolveInitialization = resolve;\n            });\n        });\n    }\n    setSourceSampleRate(sourceSampleRate) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.worker.postMessage({\n                type: 'SET_SOURSE_SAMPLE_RATE',\n                sourceSampleRate,\n            });\n            return new Promise(resolve => {\n                this.resolveSourceSampleRateSet = resolve;\n            });\n        });\n    }\n    close() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                this.worker.postMessage({\n                    type: 'CLOSE',\n                    code: 1000,\n                    message: 'Client has ended the session',\n                });\n                resolve();\n            });\n        });\n    }\n    startContext(appId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                this.startCbs.push((err, id) => {\n                    if (err !== undefined) {\n                        reject(err);\n                    }\n                    else {\n                        resolve(id);\n                    }\n                });\n                if (appId != null) {\n                    this.worker.postMessage({ type: 'START_CONTEXT', appId });\n                }\n                else {\n                    this.worker.postMessage({ type: 'START_CONTEXT' });\n                }\n            });\n        });\n    }\n    stopContext() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                this.stopCbs.push((err, id) => {\n                    if (err !== undefined) {\n                        reject(err);\n                    }\n                    else {\n                        resolve(id);\n                    }\n                });\n                this.worker.postMessage({ type: 'STOP_CONTEXT' });\n            });\n        });\n    }\n    switchContext(appId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                this.startCbs.push((err, id) => {\n                    if (err !== undefined) {\n                        reject(err);\n                    }\n                    else {\n                        resolve(id);\n                    }\n                });\n                this.worker.postMessage({ type: 'SWITCH_CONTEXT', appId });\n            });\n        });\n    }\n    postMessage(message) {\n        this.worker.postMessage(message);\n    }\n    sendAudio(audioChunk) {\n        this.worker.postMessage({ type: 'AUDIO', payload: audioChunk });\n    }\n}\nexports.WebWorkerController = WebWorkerController;\n//# sourceMappingURL=webWorkerController.js.map"]},"metadata":{},"sourceType":"script"}