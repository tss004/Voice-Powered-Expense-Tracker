{"ast":null,"code":"/*\n Copyright 2012-2015, Yahoo Inc.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n'use strict';\n/**\n * istanbul-lib-coverage exports an API that allows you to create and manipulate\n * file coverage, coverage maps (a set of file coverage objects) and summary\n * coverage objects. File coverage for the same file can be merged as can\n * entire coverage maps.\n *\n * @module Exports\n */\n\nconst {\n  FileCoverage\n} = require('./lib/file-coverage');\n\nconst {\n  CoverageMap\n} = require('./lib/coverage-map');\n\nconst {\n  CoverageSummary\n} = require('./lib/coverage-summary');\n\nmodule.exports = {\n  /**\n   * creates a coverage summary object\n   * @param {Object} obj an argument with the same semantics\n   *  as the one passed to the `CoverageSummary` constructor\n   * @returns {CoverageSummary}\n   */\n  createCoverageSummary(obj) {\n    if (obj && obj instanceof CoverageSummary) {\n      return obj;\n    }\n\n    return new CoverageSummary(obj);\n  },\n\n  /**\n   * creates a CoverageMap object\n   * @param {Object} obj optional - an argument with the same semantics\n   *  as the one passed to the CoverageMap constructor.\n   * @returns {CoverageMap}\n   */\n  createCoverageMap(obj) {\n    if (obj && obj instanceof CoverageMap) {\n      return obj;\n    }\n\n    return new CoverageMap(obj);\n  },\n\n  /**\n   * creates a FileCoverage object\n   * @param {Object} obj optional - an argument with the same semantics\n   *  as the one passed to the FileCoverage constructor.\n   * @returns {FileCoverage}\n   */\n  createFileCoverage(obj) {\n    if (obj && obj instanceof FileCoverage) {\n      return obj;\n    }\n\n    return new FileCoverage(obj);\n  }\n\n};\n/** classes exported for reuse */\n\nmodule.exports.classes = {\n  /**\n   * the file coverage constructor\n   */\n  FileCoverage\n};","map":{"version":3,"sources":["C:/Users/hp/Desktop/expensetracker/node_modules/istanbul-lib-coverage/index.js"],"names":["FileCoverage","require","CoverageMap","CoverageSummary","module","exports","createCoverageSummary","obj","createCoverageMap","createFileCoverage","classes"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAM;AAAEA,EAAAA;AAAF,IAAmBC,OAAO,CAAC,qBAAD,CAAhC;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAkBD,OAAO,CAAC,oBAAD,CAA/B;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAsBF,OAAO,CAAC,wBAAD,CAAnC;;AAEAG,MAAM,CAACC,OAAP,GAAiB;AACb;AACJ;AACA;AACA;AACA;AACA;AACIC,EAAAA,qBAAqB,CAACC,GAAD,EAAM;AACvB,QAAIA,GAAG,IAAIA,GAAG,YAAYJ,eAA1B,EAA2C;AACvC,aAAOI,GAAP;AACH;;AACD,WAAO,IAAIJ,eAAJ,CAAoBI,GAApB,CAAP;AACH,GAZY;;AAab;AACJ;AACA;AACA;AACA;AACA;AACIC,EAAAA,iBAAiB,CAACD,GAAD,EAAM;AACnB,QAAIA,GAAG,IAAIA,GAAG,YAAYL,WAA1B,EAAuC;AACnC,aAAOK,GAAP;AACH;;AACD,WAAO,IAAIL,WAAJ,CAAgBK,GAAhB,CAAP;AACH,GAxBY;;AAyBb;AACJ;AACA;AACA;AACA;AACA;AACIE,EAAAA,kBAAkB,CAACF,GAAD,EAAM;AACpB,QAAIA,GAAG,IAAIA,GAAG,YAAYP,YAA1B,EAAwC;AACpC,aAAOO,GAAP;AACH;;AACD,WAAO,IAAIP,YAAJ,CAAiBO,GAAjB,CAAP;AACH;;AApCY,CAAjB;AAuCA;;AACAH,MAAM,CAACC,OAAP,CAAeK,OAAf,GAAyB;AACrB;AACJ;AACA;AACIV,EAAAA;AAJqB,CAAzB","sourcesContent":["/*\n Copyright 2012-2015, Yahoo Inc.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n'use strict';\n\n/**\n * istanbul-lib-coverage exports an API that allows you to create and manipulate\n * file coverage, coverage maps (a set of file coverage objects) and summary\n * coverage objects. File coverage for the same file can be merged as can\n * entire coverage maps.\n *\n * @module Exports\n */\nconst { FileCoverage } = require('./lib/file-coverage');\nconst { CoverageMap } = require('./lib/coverage-map');\nconst { CoverageSummary } = require('./lib/coverage-summary');\n\nmodule.exports = {\n    /**\n     * creates a coverage summary object\n     * @param {Object} obj an argument with the same semantics\n     *  as the one passed to the `CoverageSummary` constructor\n     * @returns {CoverageSummary}\n     */\n    createCoverageSummary(obj) {\n        if (obj && obj instanceof CoverageSummary) {\n            return obj;\n        }\n        return new CoverageSummary(obj);\n    },\n    /**\n     * creates a CoverageMap object\n     * @param {Object} obj optional - an argument with the same semantics\n     *  as the one passed to the CoverageMap constructor.\n     * @returns {CoverageMap}\n     */\n    createCoverageMap(obj) {\n        if (obj && obj instanceof CoverageMap) {\n            return obj;\n        }\n        return new CoverageMap(obj);\n    },\n    /**\n     * creates a FileCoverage object\n     * @param {Object} obj optional - an argument with the same semantics\n     *  as the one passed to the FileCoverage constructor.\n     * @returns {FileCoverage}\n     */\n    createFileCoverage(obj) {\n        if (obj && obj instanceof FileCoverage) {\n            return obj;\n        }\n        return new FileCoverage(obj);\n    }\n};\n\n/** classes exported for reuse */\nmodule.exports.classes = {\n    /**\n     * the file coverage constructor\n     */\n    FileCoverage\n};\n"]},"metadata":{},"sourceType":"script"}